version: 0.2

env:
  variables:
    FUNCTION_NAME: "my-api"
    ALIAS_NAME: "dev"
    STAGE_NAME: "dev"
    API_NAME: "my-api"

phases:
  install:
    commands:
      - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      - unzip -q awscliv2.zip
      - ./aws/install --install-dir ~/aws-cli --bin-dir ~/bin --update
      - export PATH=~/bin:$PATH
      - npm install
      - npm install -g typescript

  pre_build:
    commands:
      - echo No Pre Build phase

  build:
    commands:
      - echo Build started on `date`
      - tsc
      - CurrentVersion=$(aws lambda get-alias --function-name $FUNCTION_NAME --name $ALIAS_NAME --query 'FunctionVersion' --output text)
      - echo "Zipping deployment package"
      - mkdir -p deploy-package
      - cp -r dist/* deploy-package/
      - cp -r node_modules deploy-package/
      - cd deploy-package
      - zip -q -r ../lambda.zip .
      - cd ..
      - aws lambda update-function-code --function-name $FUNCTION_NAME --zip-file fileb://lambda.zip --debug
      - sleep 10

  post_build:
    commands:
      - echo Build completed on `date`
      - ls
      - aws lambda publish-version --function-name $FUNCTION_NAME --description "update version"
      - TargetVersion=$(aws lambda list-versions-by-function --function-name $FUNCTION_NAME --query 'Versions[-1].Version' --output text)
      - echo $CurrentVersion
      - echo $TargetVersion
      - LC_ALL=C.UTF-8 aws lambda update-alias --function-name $FUNCTION_NAME --name $ALIAS_NAME --function-version $TargetVersion
      - |
        if [ "$CurrentVersion" != "$TargetVersion" ]; then
          aws lambda delete-function --function-name $FUNCTION_NAME --qualifier $CurrentVersion
        fi
      - echo "Deploying API Gateway"
      - API_ID=$(aws apigatewayv2 get-apis --query "Items[?Name=='$API_NAME'].ApiId" --output text)
      - aws apigatewayv2 create-deployment --api-id $API_ID --stage-name $STAGE_NAME
      - echo "Deployment completed for HTTP API $API_ID at stage $STAGE_NAME"
